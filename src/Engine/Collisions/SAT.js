import ConvexPolygon from "../Bodys/ConvexPolygon";
import VectorMath from "../Vectors/VectorMath";

/**
 * @param {ConvexPolygon} poly1
 * @param {ConvexPolygon} poly2
 * @returns {boolean} Return true/false if projection of polygons intersects on all the axises generated by the noramals of the vertices of poly1 
*/
export default function SAT(poly1, poly2) {

    if (!(poly1 instanceof ConvexPolygon) || !(poly2 instanceof ConvexPolygon))
        throw 'Parameter must be of types ConvexPolygon'

    for (let i = 0; i < poly1.verticeLength; i++) {
        let normalVector = VectorMath.sub(
            poly1.vertice[(i + 1) % poly1.verticeLength],
            poly1.vertice[i]
        )
        // Rotation by 90
        normalVector.set(
            -normalVector.Y,
            normalVector.X
        )
        let projectionsPoly1 = []
        let projectionsPoly2 = []

        for (let j = 0; j < poly1.verticeLength; j++) {
            let projectionVector = VectorMath.sub(
                poly1.vertice[j],
                poly1.vertice[i]
            )
            let projectionCordinate = projectionVector.X * normalVector.X + projectionVector.Y * normalVector.Y
            
            projectionCordinate /= normalVector.mag()

            projectionsPoly1.push(projectionCordinate)
        }

        for (let j = 0; j < poly2.verticeLength; j++) {
            let projectionVector = VectorMath.sub(
                poly2.vertice[j],
                poly1.vertice[i]
            )
            let projectionCordinate = projectionVector.X * normalVector.X + projectionVector.Y * normalVector.Y
            
            projectionCordinate /= normalVector.mag()

            projectionsPoly2.push(projectionCordinate)
        }

        let p1min = Math.min(...projectionsPoly1)
        let p1max = Math.max(...projectionsPoly1)
        let p2min = Math.min(...projectionsPoly2)
        let p2max = Math.max(...projectionsPoly2)

        let notColling = p1max < p2min || p2max < p1min

        if (notColling) 
            return false
    }
    return true
}